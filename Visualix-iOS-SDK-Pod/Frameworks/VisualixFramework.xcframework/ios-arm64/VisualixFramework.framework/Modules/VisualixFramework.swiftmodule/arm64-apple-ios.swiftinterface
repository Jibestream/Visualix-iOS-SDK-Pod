// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VisualixFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import CoreImage
import CoreML
import Foundation
import SceneKit
import Swift
import UIKit
import VideoToolbox
import Vision
@_exported import VisualixFramework
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class ZeroMQSocket {
  public init(sessionID: Swift.String, mappingEndpoint: Swift.String, queryEndpoint: Swift.String, onError: @escaping ((_ error: any Swift.Error) -> ()))
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Configuration : Swift.Codable {
  public static var shared: VisualixFramework.Configuration {
    get
  }
  final public var sendTimestampInMilliSec: Swift.Bool
  public enum Size : Swift.Float, Swift.Codable {
    case x640
    case x800
    case x960
    case x1024
    case x1280
    case x1440
    case x1920
    public init?(rawValue: Swift.Float)
    public typealias RawValue = Swift.Float
    public var rawValue: Swift.Float {
      get
    }
  }
  public struct Rest : Swift.Codable {
    public var address: Swift.String
    public var port: Swift.Int
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Socket : Swift.Codable {
    public var address: Swift.String
    public var portQuery: Swift.Int
    public var portMap: Swift.Int
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Speed : Swift.Codable {
    public var localize: Swift.Double
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Translation : Swift.Codable {
    public var distance: Swift.Float
    public var angle: Swift.Int
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Frame : Swift.Codable {
    public var size: VisualixFramework.Configuration.Size
    public var rate: Swift.Int
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct EncryptionKeys : Swift.Codable {
    public var serverPublicKey: Swift.String?
    public var clientPublicKey: Swift.String
    public var clientSecretKey: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  final public var rest: VisualixFramework.Configuration.Rest {
    get
    set
  }
  final public var socket: VisualixFramework.Configuration.Socket {
    get
    set
  }
  final public var speed: VisualixFramework.Configuration.Speed {
    get
    set
  }
  final public var translation: VisualixFramework.Configuration.Translation {
    get
    set
  }
  final public var frame: VisualixFramework.Configuration.Frame {
    get
    set
  }
  final public var encryptionKeys: VisualixFramework.Configuration.EncryptionKeys {
    get
    set
  }
  final public func load()
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class ServerStatus : Swift.Codable {
  public var status: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
open class Item {
  public var id: Swift.String
  public var x: Swift.Float
  public var z: Swift.Float
  public init()
  @objc deinit
}
open class Vertex {
  public var a: Swift.Int
  public var b: Swift.Int
  public var distance: Swift.Float
  public init()
  @objc deinit
}
extension VisualixFramework.SwiftyZeroMQ {
  public struct ZeroMQError : Swift.Error, Swift.CustomStringConvertible {
    public let description: Swift.String
    public static var last: VisualixFramework.SwiftyZeroMQ.ZeroMQError {
      get
    }
    public static var invalidOption: VisualixFramework.SwiftyZeroMQ.ZeroMQError {
      get
    }
    public static var unimplemented: VisualixFramework.SwiftyZeroMQ.ZeroMQError {
      get
    }
  }
}
extension VisualixFramework.SwiftyZeroMQ {
  public struct PollFlags : Swift.OptionSet {
    public var rawValue: Swift.Int32
    public init(rawValue: Swift.Int32)
    public static let pollIn: VisualixFramework.SwiftyZeroMQ.PollFlags
    public static let pollOut: VisualixFramework.SwiftyZeroMQ.PollFlags
    public static let pollErr: VisualixFramework.SwiftyZeroMQ.PollFlags
    public static let none: VisualixFramework.SwiftyZeroMQ.PollFlags
    public typealias ArrayLiteralElement = VisualixFramework.SwiftyZeroMQ.PollFlags
    public typealias Element = VisualixFramework.SwiftyZeroMQ.PollFlags
    public typealias RawValue = Swift.Int32
  }
  public class Poller {
    public init()
    public func register(socket: VisualixFramework.SwiftyZeroMQ.Socket, flags: VisualixFramework.SwiftyZeroMQ.PollFlags = [.pollIn, .pollOut]) throws
    public func modify(socket: VisualixFramework.SwiftyZeroMQ.Socket, flags: VisualixFramework.SwiftyZeroMQ.PollFlags = [.pollIn, .pollOut]) throws
    public func unregister(socket: VisualixFramework.SwiftyZeroMQ.Socket) throws
    public func poll(timeout: Foundation.TimeInterval? = nil) throws -> [VisualixFramework.SwiftyZeroMQ.Socket : VisualixFramework.SwiftyZeroMQ.PollFlags]
    @objc deinit
  }
}
extension VisualixFramework.SwiftyZeroMQ {
  public class Socket : Swift.Hashable {
    public var handle: Swift.UnsafeMutableRawPointer?
    public init(context: VisualixFramework.SwiftyZeroMQ.Context, type: VisualixFramework.SwiftyZeroMQ.SocketType) throws
    @objc deinit
    public func connect(_ endpoint: Swift.String) throws
    public func close() throws
    public func bind(_ endpoint: Swift.String) throws
    public func unbind(_ endpoint: Swift.String) throws
    public func send(string: Swift.String, options: VisualixFramework.SwiftyZeroMQ.SocketSendRecvOption = .none) throws
    public func send(data: Foundation.Data, options: VisualixFramework.SwiftyZeroMQ.SocketSendRecvOption = .none) throws
    public func sendMultipart(parts: Swift.Array<Foundation.Data>) throws
    public func recvMultipart() throws -> Swift.Array<Foundation.Data>
    public func recv(bufferLength: Swift.Int = 256, options: VisualixFramework.SwiftyZeroMQ.SocketSendRecvOption = .none) throws -> Swift.String?
    public var hashValue: Swift.Int {
      get
    }
    public static func == (lhs: VisualixFramework.SwiftyZeroMQ.Socket, rhs: VisualixFramework.SwiftyZeroMQ.Socket) -> Swift.Bool
    public func setSubscribe(_ value: Swift.String?) throws
    public func setUnsubscribe(_ value: Swift.String?) throws
    public func setAffinity(_ value: Swift.UInt64) throws
    public func setLinger(_ value: Swift.Int32) throws
    public func setRecvHighWaterMark(_ value: Swift.Int32) throws
    public func setSendHighWaterMark(_ value: Swift.Int32) throws
    public func setMulticastRate(_ value: Swift.Int32) throws
    public func setMulticastRecoveryInterval(_ value: Swift.Int32) throws
    public func setSendBufferSize(_ value: Swift.Int32) throws
    public func setRecvBufferSize(_ value: Swift.Int32) throws
    public func setReconnectInterval(_ value: Swift.Int32) throws
    public func setMaxReconnectInterval(_ value: Swift.Int32) throws
    public func curveKeyPair() throws -> (publicKey: Swift.String, secretKey: Swift.String)
    public func setupCurveSecurityOnClientWithServerPublicKey(_ serverPublicKey: Swift.String, clientPublicKey: Swift.String, clientSecretKey: Swift.String) throws
    public func setupCurveSecurityOnServerWithServerSecretKey(_ serverSecretKey: Swift.String, serverPublicKey: Swift.String) throws
    public func setBacklog(_ value: Swift.Int32) throws
    public func getAffinity() throws -> Swift.UInt64
    public func getLinger() throws -> Swift.Int32
    public func getRecvHighWaterMark() throws -> Swift.Int32
    public func getSendHighWaterMark() throws -> Swift.UInt32
    public func getMulticastRate() throws -> Swift.Int32
    public func getMulticastRecoveryInterval() throws -> Swift.Int32
    public func getSendBufferSize() throws -> Swift.UInt32
    public func getRecvBufferSize() throws -> Swift.UInt32
    public func getReconnectInterval() throws -> Swift.UInt32
    public func getMaxReconnectInterval() throws -> Swift.UInt32
    public func getBacklog() throws -> Swift.UInt32
    public func setIntegerSocketOption(_ option: Swift.Int32, _ value: Swift.Int32) throws
    public func setUnsignedIntegerSocketOption(_ option: Swift.Int32, _ value: Swift.UInt64) throws
    public func setStringSocketOption(_ option: Swift.Int32, _ value: Swift.String?) throws
    public func hash(into hasher: inout Swift.Hasher)
  }
}
extension VisualixFramework.SwiftyZeroMQ {
  public enum SocketType : Swift.Int32 {
    case request
    case reply
    case dealer
    case router
    case publish
    case subscribe
    case xpublish
    case xsubscribe
    case push
    case pull
    case pair
    case stream
    public var rawValue: Swift.Int32 {
      get
    }
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
  }
}
public struct Graph : Swift.Codable {
  public var userMappingDirection: Swift.Float?
  public var items: [VisualixFramework.GraphItem]
  public var relativeOrigin: CoreFoundation.CGPoint?
  public var selectedFloorName: Swift.String?
  public var originRotationAngle: Swift.Float?
  public var layers: [VisualixFramework.Layer]
  public init(userMappingDirection: Swift.Float? = nil, relativeOrigin: CoreFoundation.CGPoint? = nil, selectedFloorName: Swift.String? = nil, originRotationAngle: Swift.Float? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GraphItem : Swift.Codable {
  public var x: Swift.Float, y: Swift.Float, z: Swift.Float
  public var rotation: VisualixFramework.Rotation?
  public var id: Swift.String, platform: Swift.String, name: Swift.String
  public var isAmenity: Swift.Bool
  public var displayMode: Swift.Int?
  public var image: Swift.String?
  public var extensor: [Swift.String : Swift.String]?
  public init(x: Swift.Float = 0, y: Swift.Float = 0, z: Swift.Float = 0, rotation: VisualixFramework.Rotation? = nil, id: Swift.String, platform: Swift.String, name: Swift.String, isAmenity: Swift.Bool, displayMode: Swift.Int = 1, image: Swift.String? = nil, extensor: [Swift.String : Swift.String]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Rotation : Swift.Codable {
  public let w: Swift.Float, x: Swift.Float, y: Swift.Float, z: Swift.Float
  public init(w: Swift.Float, x: Swift.Float, y: Swift.Float, z: Swift.Float)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Layer : Swift.Codable {
  public var positions: [VisualixFramework.Position]
  public var color: Swift.String
  public var name: Swift.String
  public init(positions: [VisualixFramework.Position], color: Swift.String, name: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Position : Swift.Codable {
  public var x: Swift.Float, y: Swift.Float, z: Swift.Float
  public init(x: Swift.Float, y: Swift.Float, z: Swift.Float)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class QRCodeContent : Swift.Codable {
  public var venueId: Swift.String
  public var waypointId: Swift.String
  public var heading: Swift.String
  public var width: Swift.String?
  public init(venueId: Swift.String, waypointId: Swift.String, heading: Swift.String, width: Swift.String?)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class Navigation {
  final public var arrow: SceneKit.SCNNode.Type
  public var onNavigationStart: (() -> Swift.Void)?
  public var onNavigationStop: (() -> Swift.Void)?
  public func performNavigationProcesses(from currentPosition: SceneKit.SCNVector3, to endGoal: SceneKit.SCNVector3, via trajectoryPoints: [SceneKit.SCNNode], withHapticFeedback: Swift.Bool = true) -> [SceneKit.SCNVector3]?
  public func stopNavigation()
  public func Start(from position: SceneKit.SCNVector3, toPointAt index: Swift.Int, in points: [VisualixFramework.Item], basedOn connections: [VisualixFramework.Vertex], onAddNode: @escaping ((_ node: SceneKit.SCNNode) -> ()))
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MappingInformation : Swift.Codable {
  @_hasMissingDesignatedInitializers open class MappingVector : Swift.Codable {
    public var x: Swift.Float
    public var y: Swift.Float
    public var z: Swift.Float
    @objc deinit
    open func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  open var trajectory: [VisualixFramework.MappingInformation.MappingVector]?
  public var T_points2session: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class Arrow : SceneKit.SCNNode {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum APIAction : Swift.String {
  case uploadContent
  case downloadMeta
  case saveMap
  case loadMap
  case getSavedMaps
  case deleteMap
  case downloadGraphContent
  case renameMap
  case renameInfoPoints
  case triggerLocalisation
  case triggerMappingReset
  case getTrajectory
  case getTrackingState
  case getServerStatus
  case initializeZeroMQ
  case getCurveKeys
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VXError : Swift.Error {
  public let action: VisualixFramework.APIAction
  public let errorCode: Swift.Int?
  public let message: Swift.String?
  public let data: [Swift.String : Any]?
}
public struct SwiftyZeroMQ {
  public enum Capability : Swift.String {
    case ipc
    case pgm
    case tipc
    case norm
    case curve
    case gssapi
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static var version: (major: Swift.Int, minor: Swift.Int, patch: Swift.Int, versionString: Swift.String) {
    get
  }
  public static var frameworkVersion: Swift.String {
    get
  }
  public static func has(_ capability: VisualixFramework.SwiftyZeroMQ.Capability) -> Swift.Bool
  public static func proxy(frontend: VisualixFramework.SwiftyZeroMQ.Socket, backend: VisualixFramework.SwiftyZeroMQ.Socket, capture: VisualixFramework.SwiftyZeroMQ.Socket? = nil) throws
}
extension VisualixFramework.SwiftyZeroMQ {
  public enum SocketSendRecvOption : Swift.Int32 {
    case none
    case dontWait
    case sendMore
    case dontWaitSendMore
    public var rawValue: Swift.Int32 {
      get
    }
    public func isValidRecvOption() -> Swift.Bool
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
  }
}
@_hasMissingDesignatedInitializers open class Meta : Swift.Codable {
  @_hasMissingDesignatedInitializers open class Content : Swift.Codable {
    public var url: Swift.String
    @objc deinit
    open func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  open var type: Swift.String
  open var content: VisualixFramework.Meta.Content
  open var category: Swift.String
  open var id: Swift.String
  open var name: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class TrackingState : Swift.Codable {
  public var state: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Exception : Foundation.LocalizedError {
  public struct Request {
    public static let invalid: VisualixFramework.Exception
    public static let response: VisualixFramework.Exception
    public static let upload: VisualixFramework.Exception
  }
  public static let unknown: VisualixFramework.Exception
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Controller : ObjectiveC.NSObject {
  public var trajectoryPoints: VisualixFramework.MappingInformation? {
    get
    set
  }
  public var onEmptyTrajectoryCheck: ((Swift.Bool) -> Swift.Void)?
  public var onTrajectoryUpdate: (() -> Swift.Void)?
  public var onTrajectoryTimeout: (() -> Swift.Void)?
  public var onTrajectoryNil: (() -> Swift.Void)?
  public var framesSent: Swift.Int
  public var framesReceived: Swift.Int
  final public let extensorTextKey: Swift.String
  final public let extensorHeadingKey: Swift.String
  final public let extensorTextWidth: Swift.String
  final public let status: VisualixFramework.Status
  public var serverStatus: VisualixFramework.ServerStatus?
  public var onServerStatusUpdate: (() -> Swift.Void)?
  public var trackingState: VisualixFramework.TrackingState? {
    get
    set
  }
  public var onTrackingStateUpdate: (() -> Swift.Void)?
  public var metadata: [VisualixFramework.Meta] {
    get
  }
  public var material: [Swift.String : Foundation.Data]
  public var onError: ((VisualixFramework.VXError) -> Swift.Void)!
  public var onQRScanned: ((VisualixFramework.QRCodeContent, Swift.Bool) -> Swift.Void)?
  public var logErrorCallBack: ((Swift.String) -> ())?
  public static func getCurveKeys(done: @escaping ((VisualixFramework.VXError?) -> Swift.Void))
  @objc override dynamic public init()
  public init(onUpdateOrigin: @escaping ((_ transform: SceneKit.SCNMatrix4) -> ()), onError: @escaping ((VisualixFramework.VXError) -> Swift.Void))
  @objc deinit
  public func onUpdateOrigin(_ transform: SceneKit.SCNMatrix4)
  public func enableBarcodeLocalization(onview: ARKit.ARSCNView?)
  public func enableWallRelocalization(enabled: Swift.Bool)
  public func enableTextLocalization(enabled: Swift.Bool)
  public func Update(didUpdate: ARKit.ARFrame, translationBased: Swift.Bool, position: SceneKit.SCNVector3, angleInfo: simd.simd_float3)
  public func addCorrectionOffset(offset: SceneKit.SCNVector3)
  public func setPosition(position2D: CoreFoundation.CGPoint, heading: CoreFoundation.CGFloat)
  public func upload(mapName: Swift.String, _ content: Foundation.Data, _ done: (() -> Swift.Void)?)
  public func downloadMeta(_ done: ((_ updatedContent: Swift.Bool) -> Swift.Void)?)
  public func saveMap(mapName: Swift.String, done: @escaping (() -> Swift.Void))
  public func loadMap(mapName: Swift.String)
  public func getSavedMaps(result: @escaping ((Foundation.Data) -> Swift.Void))
  public func deleteMap(mapName: Swift.String, done: @escaping (() -> Swift.Void))
  public func downloadGraphContent(mapName: Swift.String, result: @escaping (Swift.Result<VisualixFramework.Graph, VisualixFramework.VXError>) -> Swift.Void)
  public func renameMap(newMapName: Swift.String, oldMapName: Swift.String, done: @escaping ((Foundation.Data) -> Swift.Void))
  public func renameInfoPoints(newMapName: Swift.String, oldMapName: Swift.String, result: @escaping ((Foundation.Data) -> Swift.Void))
  public func triggerLocalisation()
  public func triggerMappingReset()
  public func getTrajectory(start: Swift.Int = 0, end: Swift.Int = 0, completion: @escaping (VisualixFramework.MappingInformation) -> Swift.Void)
  public func checkIfTrajectoryEmpty()
  public func getTrackingState()
  public func getServerStatus()
  public func correctOriginPositionalInformation(currentOriginPosition: SceneKit.SCNVector3, currentOriginAngle: simd.simd_float3)
  public func Disconnect()
}
extension VisualixFramework.Controller {
  public func convertToTransform(source point: CoreFoundation.CGPoint, facing heading: Swift.Float?, offset disttoqr: Swift.Float?) -> SceneKit.SCNMatrix4
}
extension VisualixFramework.Controller : ARKit.ARSCNViewDelegate {
  @objc dynamic public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didAdd node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @objc dynamic public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
}
extension CoreFoundation.CGPoint {
  public func offset(byDistance distance: CoreFoundation.CGFloat, inDirection radians: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  public static func + (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
}
@_hasMissingDesignatedInitializers open class BrunoPubKey : Swift.Codable {
  public var pub_key: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension VisualixFramework.SwiftyZeroMQ {
  public class Context : Swift.Hashable {
    public var handle: Swift.UnsafeMutableRawPointer?
    public init() throws
    @objc deinit
    public func shutdown() throws
    public func terminate() throws
    public func close() throws
    public func socket(_ type: VisualixFramework.SwiftyZeroMQ.SocketType) throws -> VisualixFramework.SwiftyZeroMQ.Socket
    public func isBlocky() throws -> Swift.Bool
    public func setBlocky(_ enabled: Swift.Bool = true) throws
    public func getIOThreads() throws -> Swift.Int
    public func setIOThreads(_ value: Swift.Int = 1) throws
    public func setThreadSchedulingPolicy(_ value: Swift.Int = -1) throws
    public func setThreadPriority(_ value: Swift.Int = -1) throws
    public func getMaxMessageSize() throws -> Swift.Int
    public func setMaxMessageSize(_ size: Swift.Int = Int(Int32.max)) throws
    public func getMaxSockets() throws -> Swift.Int
    public func setMaxSockets(_ value: Swift.Int = 1024) throws
    public func isIPV6Enabled() throws -> Swift.Bool
    public func setIPV6Enabled(_ enabled: Swift.Bool = false) throws
    public func getSocketLimit() throws -> Swift.Int
    public var hashValue: Swift.Int {
      get
    }
    public static func == (lhs: VisualixFramework.SwiftyZeroMQ.Context, rhs: VisualixFramework.SwiftyZeroMQ.Context) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@_hasMissingDesignatedInitializers final public class Status {
  public enum Mode {
    case off, download, localize, on, navigate, map
    public static func == (a: VisualixFramework.Status.Mode, b: VisualixFramework.Status.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var mode: VisualixFramework.Status.Mode {
    get
    set
  }
  final public var onModeChanged: [((VisualixFramework.Status.Mode, VisualixFramework.Status.Mode) -> Swift.Void)]
  final public func disconnect()
  @objc deinit
}
extension VisualixFramework.Configuration.Size : Swift.Equatable {}
extension VisualixFramework.Configuration.Size : Swift.Hashable {}
extension VisualixFramework.Configuration.Size : Swift.RawRepresentable {}
extension VisualixFramework.SwiftyZeroMQ.SocketType : Swift.Equatable {}
extension VisualixFramework.SwiftyZeroMQ.SocketType : Swift.Hashable {}
extension VisualixFramework.SwiftyZeroMQ.SocketType : Swift.RawRepresentable {}
extension VisualixFramework.APIAction : Swift.Equatable {}
extension VisualixFramework.APIAction : Swift.Hashable {}
extension VisualixFramework.APIAction : Swift.RawRepresentable {}
extension VisualixFramework.SwiftyZeroMQ.Capability : Swift.Equatable {}
extension VisualixFramework.SwiftyZeroMQ.Capability : Swift.Hashable {}
extension VisualixFramework.SwiftyZeroMQ.Capability : Swift.RawRepresentable {}
extension VisualixFramework.SwiftyZeroMQ.SocketSendRecvOption : Swift.Equatable {}
extension VisualixFramework.SwiftyZeroMQ.SocketSendRecvOption : Swift.Hashable {}
extension VisualixFramework.SwiftyZeroMQ.SocketSendRecvOption : Swift.RawRepresentable {}
extension VisualixFramework.Status.Mode : Swift.Equatable {}
extension VisualixFramework.Status.Mode : Swift.Hashable {}
